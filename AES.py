# Created by Arthur Avagyan at 23.04.2020


def printByte(byte: int):
    print('0x%02X' % byte)


def printRow(row: [int]):
    print(''.join('0x%02X ' % i for i in row))


def printBlock(block: [[int]]):
    for i, row in enumerate(block):
        if len(block) > 4 and i % 4 == 0: print('\nRound key ', i // 4)
        print(''.join('0x%02X ' % i for i in row))


class AES:
    sBox = (
        0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
        0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
        0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
        0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
        0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
        0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
        0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
        0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
        0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
        0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
        0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
        0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
        0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
        0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
        0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
        0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
    )

    constMatrix = [[0x02, 0x03, 0x01, 0x01],
                   [0x01, 0x02, 0x03, 0x01],
                   [0x01, 0x01, 0x02, 0x03],
                   [0x03, 0x01, 0x01, 0x02]]

    pX = 0b100011011

    rCon = [[0x01, 0x00, 0x00, 0x00],
            [0x02, 0x00, 0x00, 0x00],
            [0x04, 0x00, 0x00, 0x00],
            [0x08, 0x00, 0x00, 0x00],
            [0x10, 0x00, 0x00, 0x00],
            [0x20, 0x00, 0x00, 0x00],
            [0x40, 0x00, 0x00, 0x00],
            [0x80, 0x00, 0x00, 0x00],
            [0x1b, 0x00, 0x00, 0x00],
            [0x36, 0x00, 0x00, 0x00]]

    scheduledKeys: [[int]] = []

    @staticmethod
    def subBytesRow(row: [int]):
        for j in range(len(row)):
            row[j] = AES.sBox[row[j]]

    @staticmethod
    def subBytes(block: [[int]]):
        for i in range(len(block)):
            AES.subBytesRow(block[i])

    @staticmethod
    def shiftRow(row: [int], n: int):
        row[0], row[1], row[2], row[3] = row[(0 + n) % 4], row[(1 + n) % 4], row[(2 + n) % 4], row[(3 + n) % 4]

    @staticmethod
    def shiftRows(block: [[int]]):
        for i in range(1, 4):
            AES.shiftRow(block[i], i)

    @staticmethod
    def getBits(n: int):
        bitCount = 8
        bits = [(n >> bit) & 1 for bit in range(bitCount - 1, -1, -1)]
        return bits

    @staticmethod
    def moduloMultiplication(a: int, b: int):
        x = 0x00
        for index, bit in enumerate(reversed(AES.getBits(b))):
            x = x ^ ((a * bit) << index)
        return x

    @staticmethod
    def moduloGF(num: int):
        while num >= AES.pX:
            times = int(num / AES.pX)
            num = num ^ (AES.pX << (times - 1))
        return num

    @staticmethod
    def multiplicationGF(a: int, b: int):
        return AES.moduloGF(AES.moduloMultiplication(a, b))

    @staticmethod
    def mixColumn(column: [int]):
        mixedColumn = []
        for i in range(len(AES.constMatrix)):
            byte = 0x00
            for j in range(len(column)):
                byte ^= AES.multiplicationGF(column[j], AES.constMatrix[i][j])
            byte = AES.moduloGF(byte)
            mixedColumn.append(byte)
        column[:] = mixedColumn

    @staticmethod
    def mixColumns(block: [[int]]):
        mixedBlock: [[int]] = [[], [], [], []]
        for j in range(len(block)):
            column = []
            for i in range(len(block[j])):
                column.append(block[i][j])
            AES.mixColumn(column)
            for i in range(len(column)):
                mixedBlock[i].append(column[i])
        block[:] = mixedBlock

    @staticmethod
    def generateFuncKeyRow(keyBlock: [[int]], n: int):
        n4ThRow = keyBlock[(n + 1) * 4 - 1][:]
        AES.shiftRow(n4ThRow, 1)
        AES.subBytesRow(n4ThRow)
        return n4ThRow

    @staticmethod
    def xorArrays(arr1: [int], arr2: [int]):
        for i in range(len(arr1)):
            arr1[i] ^= arr2[i]

    @staticmethod
    def generateKeyRows(keyBlock: [[int]]):  # AES 128
        for i in range(10):
            funcKey = AES.generateFuncKeyRow(keyBlock, i)

            AES.xorArrays(funcKey, AES.rCon[i])

            for j in range(4):
                AES.xorArrays(funcKey, keyBlock[4 * i + j])
                keyBlock.append(funcKey[:])

    @staticmethod
    def scheduleKeysFrom(keyBlock: [[int]]):
        for row in keyBlock:
            AES.scheduledKeys.append(row)
        AES.generateKeyRows(keyBlock)


plainBlock = [[0x19, 0xa0, 0x9a, 0xe9],
              [0x3d, 0xf4, 0xc6, 0xf8],
              [0xe3, 0xe2, 0x8d, 0x48],
              [0xbe, 0x2b, 0x2a, 0x08]]

key = [[0x2b, 0x7e, 0x15, 0x16],
       [0x28, 0xae, 0xd2, 0xa6],
       [0xab, 0xf7, 0x15, 0x88],
       [0x09, 0xcf, 0x4f, 0x3c]]

aes = AES()

print('\nPlain text')
printBlock(plainBlock)

aes.subBytes(plainBlock)
print('\nSubstitute Bytes')
printBlock(plainBlock)

aes.shiftRows(plainBlock)
print('\nShift Rows')
printBlock(plainBlock)

aes.mixColumns(plainBlock)
print('\nMix Columns')
printBlock(plainBlock)

print('\nKey Block')
printBlock(key)

aes.scheduleKeysFrom(key)
print('\nScheduled Keys')
printBlock(key)

#Khudaverdyan, correct
